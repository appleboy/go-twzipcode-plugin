// Code generated by go-bindata.
// sources:
// twzipcode/twzipcode.json
// DO NOT EDIT!

package twzipcode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _twzipcodeTwzipcodeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x99\xdb\x52\xe2\x4a\x17\xc7\xef\xe7\x29\x2c\xaf\xf7\x85\x90\x90\xc3\xf7\x6a\xbb\x76\x95\x8a\x88\x1c\x45\x45\x82\x8a\xa2\xa2\x32\x1e\x40\x22\x8e\x1c\x1c\xe0\x65\xe8\x4e\xf2\x16\x5f\x25\xab\xfb\xbf\xc2\x4c\xd5\xdc\xcc\xcf\x24\xdd\xbd\x7a\x1d\xfe\x6b\xf1\xef\x8f\xad\xad\x6d\xd1\x9d\x47\x97\x87\x62\xba\xbf\xfd\xbf\xad\x7f\xb7\xd7\xdf\x7b\xf2\xe0\x4a\xd4\x76\xb7\xff\xb7\xb5\x9d\xdd\xd9\xd9\xfe\x67\x6b\x7b\xbd\xba\x0b\x96\xcf\x60\x99\x84\x4d\x07\x72\xd0\x03\xcb\x2a\x26\x7c\x1f\xcc\x88\x99\x18\x96\xe4\xcf\x7d\x30\x33\x66\xf2\xb2\x25\x2f\x5b\x60\x39\x7a\x37\x2f\x6e\x7f\x81\x59\xdb\xff\xfd\x13\x6f\x2e\x2c\xce\x45\xd5\xc3\xe6\xd2\x8b\x66\x68\x73\xe2\xa1\x2f\x1a\x55\x30\xe3\xaf\x8d\x64\xd4\xa2\xd7\xcb\x34\xcb\xe9\x77\x87\x25\x30\x2b\x66\x61\xe3\x2d\x3c\x7e\x07\x73\xfe\x32\x40\x26\x43\xeb\xf6\x5e\xe5\x8d\x07\x96\x18\x45\x54\x3d\x59\x3e\x07\x4b\x8c\x22\x0a\x7d\x39\x6b\x81\x25\x7b\x11\x35\x4f\x4e\xb1\x46\x26\xd9\x8b\x6c\x15\x53\xfb\xcb\x68\x03\xc8\xd6\x88\x0d\xf0\x63\x6b\x6b\x2b\xd9\x61\x54\xac\xc2\x54\x76\xfc\x76\x54\x3c\x49\x9b\xde\xa1\x13\xaf\xe4\x73\x45\xb3\x6c\xb2\x6b\xe9\x37\xe4\xe0\x1e\x2c\xd9\xb5\x9c\xf8\xe2\xfa\x04\x2c\xd9\x75\xd0\x1d\x07\xf7\x45\x30\x63\xfb\x1f\x5a\x3b\x38\xb9\x09\xcb\x63\x70\x3a\xcd\x6c\x2c\xe7\x2f\x60\x89\x15\xa3\xab\x8b\x34\x4b\xf6\x18\x7e\xdc\x8b\xf7\x21\x18\xed\xb1\x35\x12\x73\x6d\xc5\xac\x41\x56\xbc\x7e\x61\xcb\x66\x8d\x2c\xd6\xce\x1f\xaf\x97\x87\xe0\xc9\x4d\xcb\xd1\x54\x9c\xc2\x16\x86\xa9\x6f\x3f\xc5\xe8\xa6\x3b\x5d\xd1\xad\x83\x59\xf4\x5c\x49\x8c\x17\x60\xc9\x1e\xe5\xcf\x59\x7a\x6d\x47\xaf\x1d\x7d\xbd\xcb\x01\x7f\xd3\x55\xef\x47\xc5\x9a\x66\x66\x46\x9d\x27\xac\x97\xc1\x12\x5b\xca\xf1\x28\x75\x37\x26\xed\xfb\xc6\x13\xc7\x08\x1f\x33\xd9\x77\xd8\x3e\x94\x9f\x1f\x60\xb6\x5e\x7b\x3d\x6f\x86\xfb\x77\xe0\x0e\x79\xd5\x6b\xca\x07\x4c\x97\xee\xf1\x4e\x8e\x3e\x35\xcb\xa9\x30\x2d\x85\xe5\x6b\x30\x7d\xb7\x51\x6b\x17\xcc\xd8\xfe\xb1\xb5\x45\xce\x26\x86\x9d\xb0\x3d\x08\xa6\x3d\x76\x36\x42\xe4\x7f\xdb\x59\x2b\x71\xa2\xe8\x76\x20\xba\xf5\xa8\x3e\x24\x96\x2c\x14\x3c\xec\xc9\xf9\x4b\x74\x50\x22\x46\xae\xdf\x7b\x17\x9d\x1a\x18\xe5\x83\xb3\x3b\xe1\xfb\x60\xc9\xc1\x83\x65\x41\x5e\xfb\xf8\x5e\x0e\x07\x9f\x96\x64\xbb\x8b\x67\x2d\x0e\x77\xb0\xe4\xd2\xd6\xf3\x66\xf0\xab\x01\x46\x06\x3a\x7c\x4b\xaf\xe3\x92\x81\x8b\x72\x39\xd6\xeb\xd8\x3b\x3a\x14\x97\x63\xfd\x9c\x0d\x67\x8b\x8a\xbd\x68\x70\x19\xa7\x9f\x23\x4f\x7c\xfd\x4e\xfe\xea\xee\xb0\xa9\x64\x6b\x14\xbc\xce\x74\x62\x92\xd7\xfa\x7e\x0d\x95\x95\xaa\xde\x26\x88\x9e\x2e\xd8\x09\x62\x96\xfe\xcc\x86\xc5\xe3\xcf\xea\x88\xdf\x36\x28\xb3\xc6\x19\xe4\xb8\xa7\x76\x69\x50\x92\x8b\x5d\xcd\x6f\x80\x99\x3a\x9c\xba\x4d\x75\x42\x83\x92\x5c\xe4\x75\xc2\xc7\x15\x18\x25\xb9\x72\x5d\xde\x78\x78\x17\xae\x26\xde\xbf\xd8\x6a\x06\xa5\x91\xe0\x75\xc6\xb7\x63\x50\xf2\x5b\xcf\x9b\x62\x3c\xd2\xcf\x51\xf2\x93\xcf\xaf\xa9\x77\x55\xf2\x1b\xb5\x62\x6f\xd3\xcc\xd0\xa6\xe9\x36\xc1\x4c\xac\x3d\xfe\x29\x7e\x55\xc0\x73\x29\x5b\xdf\xe5\x45\xe7\x74\x23\x07\xc6\x31\xde\xd3\x79\xcc\xa0\xdc\x26\x66\xf1\xdd\x82\x25\x06\x89\x96\x35\xb9\x18\x80\x51\xa6\x7d\x2c\xcb\xfb\x02\x98\xa5\x0d\xe7\x57\xc0\x28\x5f\xf5\x77\xa3\xee\x18\x0c\xb9\x40\x6d\x47\x71\x83\xae\x77\xd9\x49\x5d\x2f\xe5\x26\x51\x78\x15\xcb\x09\x98\xa9\xdc\x97\xf3\xa2\xa1\x72\xd3\xf2\x39\x3c\x3a\x02\x83\x9b\xa7\xd6\xc0\x05\x85\xed\xc3\xd8\x3f\x34\x77\xd8\x48\x61\xc5\x93\xb7\xde\x5f\x9e\x54\xf3\xf4\xcd\xe5\x74\xec\xae\xbf\x17\xda\xbb\x90\x24\x82\x3d\x78\x17\x25\x09\x51\xf3\xc4\xfc\x00\x2c\x39\x50\x50\x2b\xc8\xc5\x00\x8c\x0e\xb4\xac\x46\xcb\x1a\xd6\xb0\x10\x3f\xbb\x97\x51\xe7\x00\x9c\x0c\x5a\x39\x09\x7b\x77\x60\x0e\xb1\x78\xdb\x7a\x3f\x2a\xbf\xec\xde\xca\x67\x78\x02\xe5\x97\x38\xe7\xf8\xcc\x54\x69\x7d\x8b\x1e\x7e\x82\xa1\x48\xc5\x46\x9e\xb5\xc0\x4d\x9d\x84\x87\x25\x30\x8a\x8c\x72\x21\x3a\xf9\x0d\xa6\x8b\x42\xb0\x7c\x06\xa3\x7d\x3f\xae\xd2\xdf\xa3\xfc\x52\x3b\x0b\xdb\x03\x7d\x16\xcb\x4d\x5d\x44\x71\x1e\x7b\xe7\x9f\xde\x4a\x57\x66\x52\x36\xe0\x7c\x61\x92\x9c\x8a\xcd\xad\x41\x56\xad\x09\x60\x6c\x66\x14\x93\x62\x3d\x06\xfe\x3b\x98\xa5\xdf\x4a\x31\x5b\x7f\x3a\xc5\x1c\xb6\xd2\x8b\x98\x69\xf7\x36\x95\x80\x79\xe8\x73\x59\x31\x29\x86\xa3\x4e\x5f\x8c\x47\x60\xe4\x09\xf9\x63\xe9\x3d\x82\x51\xf9\xf2\x1b\xa2\xde\xd5\x4c\x85\x64\xa3\x9e\xfa\x5e\x2c\x37\x94\x67\x76\xc7\xe2\xe3\x0e\x3c\xab\x6d\x52\xb9\x07\xa3\x43\x9f\x56\x53\x7b\xcc\xea\x1c\x17\x3c\x2c\xc1\x28\x7c\x17\x03\x31\x68\x80\xd9\xfa\x2c\x57\x05\x30\x9c\x3b\x78\xbc\x49\xaf\xed\xaa\x67\xc3\xfd\x4b\xcd\x0c\xda\xcf\xc7\x45\x34\xc3\x25\x50\x48\x47\xcb\xda\x7a\x7e\x0e\x46\xfb\xb9\xef\xcb\xde\x07\x18\xa5\x98\x69\x81\x4b\xb1\x69\x58\x29\xcf\x0c\x9a\xfc\xac\xda\x67\x4b\x74\x9b\x60\xce\x5f\xc2\xd4\x34\x52\xde\x25\x16\x23\x51\x6d\x6d\x96\xe8\x04\xa9\x10\xca\x91\x83\x85\xe5\x37\xd1\x39\x55\x2e\x9b\x53\x2e\x55\xf6\x45\xaf\x08\x46\x17\xd9\xdf\x95\xa3\x4f\x30\xca\x99\xb3\x95\x9c\xbe\x2b\xd7\xce\x51\x11\x09\x9e\x8e\xc3\xa3\x23\x3c\x87\x03\x05\x93\xcb\xb8\xb8\x68\x6e\xab\x4b\x0b\x96\x75\xbc\x4f\x0a\xfa\xf7\x34\xfe\xa6\x7e\xce\x55\x52\x20\x96\x41\x6a\xdf\x54\x58\x82\x87\x65\x74\xab\x53\x4c\x4e\x15\x96\xd1\x34\xba\x6e\x81\xa1\x44\xc7\x56\x5b\xe5\xc1\xa9\x28\xce\x5f\xe2\x50\x55\x6b\x67\x90\x73\xaf\x4f\xf0\x1c\xe5\xdc\x6e\x33\x9a\x2d\xc0\x12\x27\x0a\x9a\xa3\xf5\x54\x87\x74\x2e\xab\xeb\xb8\x6c\x79\x60\xec\xc0\xcd\x91\x18\x2d\xf5\xfb\xe4\xc0\xa2\xfb\x90\xda\x7b\x56\xef\x47\x4c\x6e\xc0\x4c\x55\x50\xc5\x5d\x1b\x8c\xda\x9f\x79\x35\x2e\xc8\x7a\x1d\xd4\x80\x6e\x1d\xcf\x71\x0d\x28\x8f\xc3\x0a\xce\x43\x3a\x3a\x7e\x9f\xef\xd1\x48\x09\x95\x58\xe0\x94\xcf\x37\x1d\x26\x41\xda\xf0\xe6\x8e\x16\xcd\xef\x43\xfd\x01\x12\xb3\x61\xad\x24\x7c\x38\x02\x89\x59\xd1\xa9\x88\xfe\x19\x9e\x33\xb5\x31\x8b\x55\x3c\x47\x07\x4a\xfa\x48\x3c\xc7\x11\xd0\xa8\x45\x2d\xbc\x4f\xf5\x27\xba\x3a\x8c\xff\xa9\xf7\xa9\xfe\xc4\xa7\x29\x56\xf1\x1c\x45\xdf\xe0\x52\xfa\xb7\x60\xb4\x4e\xd2\x9a\x81\x59\xda\xc0\xbe\x8f\xef\xc1\x70\xd1\x6c\x15\x8e\x26\x78\x36\x55\x3c\x45\x3b\xce\xfa\x7f\xab\x39\x4b\x45\x13\x92\xb1\x05\xe5\x46\xaf\x6c\xd6\xdb\xf3\x97\x70\xa2\x9d\xdc\x52\xca\xed\xbe\xc0\xaa\xc8\x52\x41\xf7\x3a\x13\x9f\x75\x30\x0a\xba\xf6\x2a\xce\x94\xbe\x4f\x2c\xa7\xef\x04\x4a\xc9\xda\x61\xa7\x60\x86\xb3\xc9\xd1\xe7\x7a\x5a\x06\x77\x54\x20\x87\x35\x5d\xf3\x2c\x9d\xe1\x5f\xd6\xab\x6b\x75\xf7\x16\x65\x78\xd9\xf9\x8c\xb3\xa7\x66\x86\xca\xc6\xac\xdc\x2c\x15\x48\x85\x41\x58\x60\x06\x9d\x2e\x5b\x23\x0e\x6e\x8b\x82\x49\x8e\x4e\xa2\x2b\xad\x1f\xac\xac\xae\x2e\xec\xe4\x96\xca\xfa\xf3\x17\x56\xb6\x16\x05\x4d\x6c\xd7\xd7\x19\x18\xad\x3d\xcd\x87\xf7\x15\xbc\x9b\x52\x87\xd1\xd5\x87\xbc\xd9\x14\x3e\xb2\xe5\xb1\xf0\xb1\x0c\xcc\x09\xba\x0f\xfa\xa3\xd4\x69\x86\x17\xf5\x38\x8a\xf5\x73\xca\xc1\xbb\x62\xfe\x0a\x96\x6c\x28\x7c\x38\x15\xab\x5b\xbc\x6b\x72\xb9\x02\x83\x31\xc2\xe2\x9c\x33\xa2\xa5\xd4\xdc\xe7\x45\x98\xaf\x82\x51\xc7\x3e\x7f\xe4\x80\xb3\x0c\xd5\x0d\x7b\xa2\xa0\x9b\x2d\x8b\x02\x33\x4e\x91\x85\xbe\x7e\x8e\xba\x47\x71\xfc\x20\x90\xd1\x2c\x0e\xae\xb0\xbe\x92\x77\x0d\x70\x2d\x5e\xc2\x9b\xb9\x3e\x8f\xa9\xb3\x85\xf8\xbc\xc0\x73\xae\xce\x74\xc8\xfa\x56\x4e\x65\xde\x4f\x6e\x13\x2c\x25\x0c\x8f\x7b\x2c\x86\xac\x1c\x8b\xae\xab\xab\x34\x57\x0e\x93\x8f\xce\x27\x60\xb9\x0d\x91\x14\xeb\x92\x3f\x44\x12\xc7\x99\xfd\xa7\x4e\xb2\xff\xd4\x49\x36\xc5\x17\xcb\x22\x5b\xc9\xa2\x61\x89\x25\x83\x4d\x81\x90\xd4\x52\x7e\xce\xe5\xa0\x99\x8a\xb9\x56\xe8\x36\x55\x20\x39\x98\xae\xbf\xf7\xc0\x74\x57\x1f\x57\x58\xcd\x68\xe1\xc9\x13\x77\x1b\xb6\x92\x45\xf5\x12\xcb\x03\x9b\x82\x46\x3e\xde\xa6\x8e\xc5\x41\x13\x6f\x28\xf5\x4d\x4b\x25\x4d\xee\x18\xec\x0c\xf9\x89\xd7\x11\xdf\x5d\x30\x47\xc9\x10\xf1\x59\x07\xa3\xfb\x1b\xb6\xe3\xa2\xa4\x18\x55\xaf\x68\xfe\x1d\xfa\x87\x60\xa8\x5e\xeb\xc5\x98\x65\x99\x9d\xd5\x82\x93\x67\x52\x76\x56\xcd\xd1\xf2\x3c\x79\xb0\x55\x20\x8e\x8a\xe1\x77\x0d\x8c\xaa\xe9\x60\xca\xb2\xc6\x56\xd5\xab\xea\xf1\x94\xc1\xe6\xea\x15\xcb\xb7\x22\xce\xa3\x62\x73\x59\x15\x3d\xd8\x9c\x62\x33\xb8\x58\xc8\x0f\xdc\xa3\x01\x89\x88\x2e\xcb\xd6\x5d\xd6\x20\xb5\xb6\x9e\x00\x55\xd2\x6b\x70\xa2\xea\x8e\xd3\x9c\x26\x55\xb3\x05\x4b\x35\x5b\x49\xb2\xd6\x41\xea\x6e\x4c\x9d\xbc\x44\xa1\x0f\x46\x3e\xe0\xfb\xeb\x69\x19\x4c\xb7\xe5\x62\xba\x0f\xc6\xed\xed\xb0\x24\x86\x97\xe0\xe9\x04\xf6\xda\x8e\xae\x0e\x36\x62\x21\xee\xed\xd1\x12\x3a\x6a\xa4\x50\xaa\x45\xc5\x13\x30\x4a\x60\x95\x33\xd6\xb8\x0e\x45\x44\x34\x5b\x88\xee\x39\x18\x55\xce\xdf\x67\x6c\x38\x47\xcd\x0a\x3c\x4f\x7e\x3e\x82\xb1\x63\x96\x6a\xec\xd8\xce\x8e\xee\x8a\xe4\x88\xd7\xb6\x95\x63\xcb\xfb\x33\xcd\x54\x75\x19\x1d\xb3\x13\x39\x08\x14\x36\xba\x93\x41\xc2\x88\x15\xc2\xe0\x09\x5c\x4b\x35\xd6\xf6\x8e\x1a\x8c\x5e\xfb\xf2\xe3\x22\x58\x3e\x88\xf1\x17\x61\xdd\xd6\xfc\x81\x29\x0c\x3e\xee\x52\x27\xa5\x30\x08\x27\xef\xdc\x34\x3b\x1c\x06\x51\x7b\x15\x9e\xe1\xa4\x6a\xf0\xd9\x1c\xf1\x90\xd2\x49\x0d\x3e\x8b\xe7\x62\x72\x0f\x4e\x16\x7c\xae\xc4\x6d\xa9\x66\xb4\xdb\xfb\x33\x31\x6c\x83\x51\x28\x2c\xaa\xd1\xc5\x2e\x98\xad\x44\x2d\x2b\x7c\x47\x0d\x43\x67\x2d\x76\x31\x27\x8b\x34\x15\x8d\xc7\xa9\x33\x71\x39\xe3\x7d\x52\xc8\xc4\xa5\x02\x43\x03\x87\x42\x26\x1a\x3f\xca\x6b\x58\x54\x85\xcc\x43\x5f\xfe\x84\x3d\x54\x99\xf1\xbc\xd4\x1a\x26\x0f\x5d\x97\x75\xb9\xca\x83\xeb\x90\x8b\x96\x1d\x30\x95\xea\xfb\x1c\xee\x8e\xa9\x6e\xae\xc4\xc3\x54\xc7\x54\x22\xfb\x63\xfd\x7d\x01\x46\xb6\xb8\xcb\xcb\x79\x03\x8c\x87\xae\xfb\xbd\xe0\xe4\x45\x3c\x1c\xe3\x4f\x34\xc6\xab\xee\xa7\x3e\x4b\x95\x2a\xac\x1e\x84\x8d\x1e\x58\x36\x25\xed\xfc\xe3\x58\xcb\x6c\xe8\xdf\x04\xa9\x32\xeb\xaa\xdf\x38\xa6\x25\xd1\x19\x45\xad\x5d\x55\xad\x5c\x0a\xb0\xa8\xd3\x0f\x8b\x73\x30\x72\x91\x93\x17\x31\xfc\x02\xa3\x4c\x39\xbb\x16\x4f\xfb\x60\x24\xe9\x8a\x55\x96\x45\x2e\x07\x58\xf4\xda\x96\x3f\x67\xe0\x16\x82\xb6\x09\x46\x99\xff\x7c\x22\x3f\xbe\xc1\x28\xf3\xcf\xbb\xf2\xf3\x0a\xcc\x55\x72\x32\x68\xea\x61\x9c\xab\x02\xb1\x90\x92\x89\x2e\xf7\x4c\x61\xe3\x6d\x3d\xc5\xda\x4a\xea\x2d\x86\x71\x8f\x42\x95\xdf\x55\xbf\x13\x8c\x47\x72\xf0\xa4\x9f\x23\xf9\xb6\x5e\x1e\xb2\xd4\x76\x55\xd5\x68\xbc\x89\xc9\x29\x18\xb9\xc7\xe7\x5e\x74\x0b\x5b\x64\xcd\x54\xe6\x67\x05\xe6\xaa\xca\x51\xf3\xb8\x3f\x72\x55\x33\x7f\xe3\x45\xfb\x65\x30\x5b\x27\x01\xa8\x13\x97\xc2\x25\x68\x94\x82\x46\x1e\xcf\xd1\x4c\x7e\x31\x16\x87\x6f\x9a\x19\x99\xf4\xda\xe8\x87\x5d\x55\x4d\x6e\x2a\xac\xc0\x5c\xad\xb6\x2a\x2c\xd7\x5d\x35\xd3\x6f\x3f\x4a\xef\x11\x8c\x7c\xa0\x56\x10\x83\x06\x18\xa9\xc4\xef\x32\xf7\x6b\x2e\x67\xfe\xa0\x74\x97\xb2\xb9\x0a\x8d\xbd\x43\xd9\x7e\xd4\xe7\xa1\xd0\x90\xdf\xab\x94\x2d\x4c\x7b\x43\x2d\xfd\xe9\xc3\x84\xb4\x0f\xd3\x6c\x2f\xf8\xba\x15\x63\x38\xa6\x0a\x8c\xf6\x40\x7c\xfd\x06\xa3\x8c\xfc\xfd\x25\x66\x63\x30\xba\xb4\xda\x49\x2c\x99\x35\xd3\x83\x80\xa8\x88\x03\xe5\xd8\x81\xbd\x0e\xf7\x57\x2e\xf5\x5c\xf2\xd7\x24\x78\x85\xb3\xd3\xbc\x4f\xfa\xb7\xdc\x93\xb8\x39\x07\xd9\x9c\xd7\xa6\x1f\x2e\x8e\x1a\xa2\xdc\xd5\xdf\x53\xf3\xbe\xf3\x89\x5c\xe1\x22\xac\x6c\x6a\x6a\x15\xcd\xbf\xb9\x35\x74\xe9\x67\x85\xb8\x32\x62\x20\xed\x5a\xe8\xfb\xd9\x87\xd5\xc8\x6f\xaf\xb9\xfe\xde\x03\xb3\x52\x36\x2e\xfb\xe1\xd9\x70\xd3\xc6\x09\xd2\x36\xa6\xdf\x0b\x12\x27\x86\x4d\x6c\x92\x2a\xfd\x5d\x96\xc9\xae\x4d\x36\x6e\x94\x78\xde\xe8\xda\x64\xe3\xde\x82\x27\xf6\xae\x4d\x36\x1e\x8f\xb9\x27\x72\x6d\xae\xc2\x85\x92\xe0\x60\xb3\x69\xba\xe7\x37\x52\x36\xb1\x6d\x4a\x46\x37\xc1\x33\xaf\xed\xa8\xa0\x94\x4f\x70\x6c\xdb\x55\xd2\x94\x7b\x74\xd7\x51\x62\xfa\x8c\x7f\xb3\x71\x1d\xb6\xf1\x7b\x35\x65\x60\x27\xf5\x03\x51\x54\x3c\x89\x5a\xbb\xca\x48\xf1\xff\xe4\xc7\x85\xfa\xa6\xe3\xee\xa8\x8b\xe0\x01\x8c\xe3\x66\xf4\xe5\xbc\xeb\x16\xc6\x71\xb3\x9a\xe1\x37\x24\xc7\x55\x53\xc5\x23\xf6\x55\xc7\xa5\x61\x49\xfe\x58\x5c\xff\x02\xd3\x3f\x8b\x46\xbb\x3d\xe9\x77\xf5\x46\x44\xcd\x0b\x5e\x75\xcf\x95\xdd\xd1\xfd\x4c\x8a\x91\xb6\x0f\xeb\xa7\xa2\x50\x02\xcb\x68\x4d\xf9\xfb\x1c\x2c\xab\x7f\x98\x59\xd6\xe5\xac\x85\x93\x3e\xbd\x89\xc2\x9b\xf2\x04\xc7\xc1\x50\x80\x77\x4b\x16\x95\x9d\x2b\xbe\x75\xc7\x51\xbf\x8a\xe7\x83\x65\x1d\xcc\x80\xb8\xbd\x00\x33\x55\xf5\xe7\xc6\xd1\x71\x72\xdb\xff\xfd\xf8\xef\xc7\xff\x03\x00\x00\xff\xff\x24\x04\xfc\xad\xa2\x1f\x00\x00")

func twzipcodeTwzipcodeJsonBytes() ([]byte, error) {
	return bindataRead(
		_twzipcodeTwzipcodeJson,
		"twzipcode/twzipcode.json",
	)
}

func twzipcodeTwzipcodeJson() (*asset, error) {
	bytes, err := twzipcodeTwzipcodeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "twzipcode/twzipcode.json", size: 8098, mode: os.FileMode(420), modTime: time.Unix(1491635413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"twzipcode/twzipcode.json": twzipcodeTwzipcodeJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"twzipcode": &bintree{nil, map[string]*bintree{
		"twzipcode.json": &bintree{twzipcodeTwzipcodeJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

